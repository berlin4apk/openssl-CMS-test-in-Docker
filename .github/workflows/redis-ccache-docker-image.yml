name: redis-ccache-docker-container

on:
  push:
  pull_request:
  schedule:
    - cron: 0 7 1 * *

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    #container: node:10.18-jessie
    #container: _/redis
    container: 6.2.4-alpine3.13
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        #image: _/redis
        image: 6.2.6-alpine3.14
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # https://hub.docker.com/_/redis
#        with:
#          args: --save 60 1 --loglevel warning
        # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
        # https://cdmana.com/2021/01/20210119024925732p.html
        # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
        # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
        # https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
        volumes:
          - my_docker_volume:/volume_mount
          - /data/my_data
          - /source/directory:/destination/directory
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

# redis-cli 6.2.6
# Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
#  -h <hostname>      Server hostname (default: 127.0.0.1).
#  -p <port>          Server port (default: 6379).
#  -s <socket>        Server socket (overrides hostname and port).
#  -a <password>      Password to use when connecting to the server.
#                     You can also use the REDISCLI_AUTH environment
#                     variable to pass this password more safely
#                     (if both are used, this argument takes precedence).
#  --user <username>  Used to send ACL style 'AUTH username pass'. Needs -a.
#  --pass <password>  Alias of -a for consistency with the new --user option.
#  --askpass          Force user to input password with mask from STDIN.
#                     If this argument is used, '-a' and REDISCLI_AUTH
#                     environment variable will be ignored.
#  -u <uri>           Server URI.
      - name: Run test to 127.0.0.1 without ssl
      # connect to the redis-server via TLS
        run: |
          redis-cli --verbose -h 127.0.0.1 -p 6379 ping

      - name: Run test to redis without ssl
      # connect to the redis-server via TLS
        run: |
          redis-cli -h redis ping

      - name: Run tests with ssl
      # connect to the redis-server via TLS
        run: |
          redis-cli -h 127.0.0.1 -p "${{ steps.setup.outputs.redis-tls-port }}" \
            --tls \
            --cert "${{ steps.setup.outputs.redis-tls-dir }}/redis.crt" \
            --key "${{ steps.setup.outputs.redis-tls-dir }}/redis.key" \
            --cacert "${{ steps.setup.outputs.redis-tls-dir }}/ca.crt" \
            ping

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      ####- name: Install dependencies
      ####  run: npm ci

      - name: Connect to Redis
        # Runs a script that creates a Redis client, populates
        # the client with data, and retrieves data
        run: node client.js
        # Environment variable used by the `client.js` script to create a new Redis client.
        env:
          # The hostname used to communicate with the Redis service container
          REDIS_HOST: redis
          # The default Redis port
          REDIS_PORT: 6379
